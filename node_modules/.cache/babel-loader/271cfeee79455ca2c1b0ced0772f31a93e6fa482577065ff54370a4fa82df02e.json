{"ast":null,"code":"var _jsxFileName = \"/Users/kunikjain/Desktop/AurigaIT_Intern/react/notepad/src/context/SettingsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SettingsContext = /*#__PURE__*/createContext();\nexport const useSettings = () => {\n  _s();\n  const context = useContext(SettingsContext);\n  if (!context) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n_s(useSettings, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SettingsProvider = ({\n  children\n}) => {\n  _s2();\n  const [settings, setSettings] = useState({\n    displayLineNumbers: false,\n    scrollPastEnd: false,\n    markdownPreview: true\n  });\n\n  // Load settings from localStorage on mount\n  useEffect(() => {\n    const savedSettings = localStorage.getItem('notepad-settings');\n    if (savedSettings) {\n      setSettings(JSON.parse(savedSettings));\n    }\n  }, []);\n\n  // Save settings to localStorage when they change\n  useEffect(() => {\n    localStorage.setItem('notepad-settings', JSON.stringify(settings));\n  }, [settings]);\n  const updateSetting = (settingName, value) => {\n    setSettings(prev => ({\n      ...prev,\n      [settingName]: value\n    }));\n  };\n  const toggleSetting = settingName => {\n    setSettings(prev => ({\n      ...prev,\n      [settingName]: !prev[settingName]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: {\n      settings,\n      updateSetting,\n      toggleSetting\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s2(SettingsProvider, \"4hs/N/pB6gMtiec64M/dD8nJxvE=\");\n_c = SettingsProvider;\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","SettingsContext","useSettings","_s","context","Error","SettingsProvider","children","_s2","settings","setSettings","displayLineNumbers","scrollPastEnd","markdownPreview","savedSettings","localStorage","getItem","JSON","parse","setItem","stringify","updateSetting","settingName","value","prev","toggleSetting","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kunikjain/Desktop/AurigaIT_Intern/react/notepad/src/context/SettingsContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst SettingsContext = createContext();\n\nexport const useSettings = () => {\n  const context = useContext(SettingsContext);\n  if (!context) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n\nexport const SettingsProvider = ({ children }) => {\n  const [settings, setSettings] = useState({\n    displayLineNumbers: false,\n    scrollPastEnd: false,\n    markdownPreview: true\n  });\n\n  // Load settings from localStorage on mount\n  useEffect(() => {\n    const savedSettings = localStorage.getItem('notepad-settings');\n    if (savedSettings) {\n      setSettings(JSON.parse(savedSettings));\n    }\n  }, []);\n\n  // Save settings to localStorage when they change\n  useEffect(() => {\n    localStorage.setItem('notepad-settings', JSON.stringify(settings));\n  }, [settings]);\n\n  const updateSetting = (settingName, value) => {\n    setSettings(prev => ({\n      ...prev,\n      [settingName]: value\n    }));\n  };\n\n  const toggleSetting = (settingName) => {\n    setSettings(prev => ({\n      ...prev,\n      [settingName]: !prev[settingName]\n    }));\n  };\n\n  return (\n    <SettingsContext.Provider value={{\n      settings,\n      updateSetting,\n      toggleSetting\n    }}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,eAAe,gBAAGN,aAAa,CAAC,CAAC;AAEvC,OAAO,MAAMO,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,OAAO,GAAGR,UAAU,CAACK,eAAe,CAAC;EAC3C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,WAAW;AAQxB,OAAO,MAAMI,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAChD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC;IACvCc,kBAAkB,EAAE,KAAK;IACzBC,aAAa,EAAE,KAAK;IACpBC,eAAe,EAAE;EACnB,CAAC,CAAC;;EAEF;EACAf,SAAS,CAAC,MAAM;IACd,MAAMgB,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;IAC9D,IAAIF,aAAa,EAAE;MACjBJ,WAAW,CAACO,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC,CAAC;IACxC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAhB,SAAS,CAAC,MAAM;IACdiB,YAAY,CAACI,OAAO,CAAC,kBAAkB,EAAEF,IAAI,CAACG,SAAS,CAACX,QAAQ,CAAC,CAAC;EACpE,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMY,aAAa,GAAGA,CAACC,WAAW,EAAEC,KAAK,KAAK;IAC5Cb,WAAW,CAACc,IAAI,KAAK;MACnB,GAAGA,IAAI;MACP,CAACF,WAAW,GAAGC;IACjB,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAME,aAAa,GAAIH,WAAW,IAAK;IACrCZ,WAAW,CAACc,IAAI,KAAK;MACnB,GAAGA,IAAI;MACP,CAACF,WAAW,GAAG,CAACE,IAAI,CAACF,WAAW;IAClC,CAAC,CAAC,CAAC;EACL,CAAC;EAED,oBACEtB,OAAA,CAACC,eAAe,CAACyB,QAAQ;IAACH,KAAK,EAAE;MAC/Bd,QAAQ;MACRY,aAAa;MACbI;IACF,CAAE;IAAAlB,QAAA,EACCA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACtB,GAAA,CA3CWF,gBAAgB;AAAAyB,EAAA,GAAhBzB,gBAAgB;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}