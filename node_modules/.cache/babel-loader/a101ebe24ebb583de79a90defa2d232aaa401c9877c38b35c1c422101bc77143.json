{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n// Test localStorage functionality\nconst testLocalStorage = () => {\n  try {\n    const testKey = 'localStorage-test';\n    const testValue = 'test-value';\n    localStorage.setItem(testKey, testValue);\n    const retrieved = localStorage.getItem(testKey);\n    localStorage.removeItem(testKey);\n    return retrieved === testValue;\n  } catch (error) {\n    console.error('localStorage not available:', error);\n    return false;\n  }\n};\nfunction useNotes() {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const [selectedNote, setSelectedNote] = useState(null);\n  useEffect(() => {\n    console.log('Testing localStorage availability...');\n    const isLocalStorageAvailable = testLocalStorage();\n    console.log('localStorage available:', isLocalStorageAvailable);\n    if (!isLocalStorageAvailable) {\n      console.error('localStorage is not available in this environment');\n      return;\n    }\n    console.log('Loading notes from localStorage...');\n    const savedNotes = localStorage.getItem('takenote-notes');\n    console.log('Saved notes:', savedNotes);\n    if (savedNotes) {\n      try {\n        const parsedNotes = JSON.parse(savedNotes);\n        console.log('Parsed notes:', parsedNotes);\n        setNotes(parsedNotes);\n      } catch (error) {\n        console.error('Error parsing saved notes:', error);\n        // If parsing fails, create welcome note\n        createWelcomeNote();\n      }\n    } else {\n      console.log('No saved notes found, creating welcome note');\n      createWelcomeNote();\n    }\n  }, []);\n  const createWelcomeNote = () => {\n    const welcomeNote = {\n      id: Date.now(),\n      title: 'Welcome to TakeNote!',\n      content: `# Welcome to TakeNote!\n\nThis is a simple note-taking app built with React.\n\n## Features:\n- Create and edit notes\n- Add notes to favorites\n- Move notes to trash\n- Search through your notes\n- Data is saved in your browser's local storage\n\nStart by creating your first note!`,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      isFavorite: false,\n      isDeleted: false\n    };\n    setNotes([welcomeNote]);\n    setSelectedNote(welcomeNote);\n  };\n  useEffect(() => {\n    if (notes.length === 0) return; // Don't save empty array on initial load\n\n    console.log('Saving notes to localStorage:', notes);\n    try {\n      localStorage.setItem('takenote-notes', JSON.stringify(notes));\n      console.log('Notes saved successfully');\n    } catch (error) {\n      console.error('Error saving notes to localStorage:', error);\n    }\n  }, [notes]);\n  const createNote = () => {\n    const newNote = {\n      id: Date.now(),\n      title: '',\n      content: '',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      isFavorite: false,\n      isDeleted: false\n    };\n    setNotes(prevNotes => [newNote, ...prevNotes]);\n    setSelectedNote(newNote);\n    return newNote;\n  };\n  const updateNote = updatedNote => {\n    setNotes(prevNotes => prevNotes.map(note => note.id === updatedNote.id ? updatedNote : note));\n    setSelectedNote(updatedNote);\n  };\n  const deleteNote = noteId => {\n    setNotes(prevNotes => prevNotes.map(note => note.id === noteId ? {\n      ...note,\n      isDeleted: true,\n      updatedAt: new Date().toISOString()\n    } : note));\n    if ((selectedNote === null || selectedNote === void 0 ? void 0 : selectedNote.id) === noteId) {\n      setSelectedNote(null);\n    }\n  };\n  const restoreNote = noteId => {\n    setNotes(prevNotes => prevNotes.map(note => note.id === noteId ? {\n      ...note,\n      isDeleted: false,\n      updatedAt: new Date().toISOString()\n    } : note));\n  };\n  const permanentDeleteNote = noteId => {\n    setNotes(prevNotes => prevNotes.filter(note => note.id !== noteId));\n    if ((selectedNote === null || selectedNote === void 0 ? void 0 : selectedNote.id) === noteId) {\n      setSelectedNote(null);\n    }\n  };\n  const toggleFavorite = noteId => {\n    setNotes(prevNotes => prevNotes.map(note => note.id === noteId ? {\n      ...note,\n      isFavorite: !note.isFavorite,\n      updatedAt: new Date().toISOString()\n    } : note));\n  };\n  const getFilteredNotes = category => {\n    switch (category) {\n      case 'favorites':\n        return notes.filter(note => note.isFavorite && !note.isDeleted);\n      case 'trash':\n        return notes.filter(note => note.isDeleted);\n      case 'all':\n      default:\n        return notes.filter(note => !note.isDeleted);\n    }\n  };\n  const getNoteCounts = () => {\n    return {\n      all: notes.filter(note => !note.isDeleted).length,\n      favorites: notes.filter(note => note.isFavorite && !note.isDeleted).length,\n      trash: notes.filter(note => note.isDeleted).length\n    };\n  };\n  return {\n    notes,\n    selectedNote,\n    setSelectedNote,\n    createNote,\n    updateNote,\n    deleteNote,\n    restoreNote,\n    permanentDeleteNote,\n    toggleFavorite,\n    getFilteredNotes,\n    getNoteCounts\n  };\n}\n_s(useNotes, \"qbGquP2p7RG0CZcWa6OuyKTgb44=\");\nexport default useNotes;","map":{"version":3,"names":["useState","useEffect","testLocalStorage","testKey","testValue","localStorage","setItem","retrieved","getItem","removeItem","error","console","useNotes","_s","notes","setNotes","selectedNote","setSelectedNote","log","isLocalStorageAvailable","savedNotes","parsedNotes","JSON","parse","createWelcomeNote","welcomeNote","id","Date","now","title","content","createdAt","toISOString","updatedAt","isFavorite","isDeleted","length","stringify","createNote","newNote","prevNotes","updateNote","updatedNote","map","note","deleteNote","noteId","restoreNote","permanentDeleteNote","filter","toggleFavorite","getFilteredNotes","category","getNoteCounts","all","favorites","trash"],"sources":["/Users/kunikjain/Desktop/AurigaIT_Intern/react/notepad/src/hooks/useNotes.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n// Test localStorage functionality\nconst testLocalStorage = () => {\n  try {\n    const testKey = 'localStorage-test';\n    const testValue = 'test-value';\n    localStorage.setItem(testKey, testValue);\n    const retrieved = localStorage.getItem(testKey);\n    localStorage.removeItem(testKey);\n    return retrieved === testValue;\n  } catch (error) {\n    console.error('localStorage not available:', error);\n    return false;\n  }\n};\n\nfunction useNotes() {\n  const [notes, setNotes] = useState([]);\n  const [selectedNote, setSelectedNote] = useState(null);\n\n  useEffect(() => {\n    console.log('Testing localStorage availability...');\n    const isLocalStorageAvailable = testLocalStorage();\n    console.log('localStorage available:', isLocalStorageAvailable);\n    \n    if (!isLocalStorageAvailable) {\n      console.error('localStorage is not available in this environment');\n      return;\n    }\n    \n    console.log('Loading notes from localStorage...');\n    const savedNotes = localStorage.getItem('takenote-notes');\n    console.log('Saved notes:', savedNotes);\n    \n    if (savedNotes) {\n      try {\n        const parsedNotes = JSON.parse(savedNotes);\n        console.log('Parsed notes:', parsedNotes);\n        setNotes(parsedNotes);\n      } catch (error) {\n        console.error('Error parsing saved notes:', error);\n        // If parsing fails, create welcome note\n        createWelcomeNote();\n      }\n    } else {\n      console.log('No saved notes found, creating welcome note');\n      createWelcomeNote();\n    }\n  }, []);\n\n  const createWelcomeNote = () => {\n    const welcomeNote = {\n      id: Date.now(),\n      title: 'Welcome to TakeNote!',\n      content: `# Welcome to TakeNote!\n\nThis is a simple note-taking app built with React.\n\n## Features:\n- Create and edit notes\n- Add notes to favorites\n- Move notes to trash\n- Search through your notes\n- Data is saved in your browser's local storage\n\nStart by creating your first note!`,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      isFavorite: false,\n      isDeleted: false\n    };\n    setNotes([welcomeNote]);\n    setSelectedNote(welcomeNote);\n  };\n\n  useEffect(() => {\n    if (notes.length === 0) return; // Don't save empty array on initial load\n    \n    console.log('Saving notes to localStorage:', notes);\n    try {\n      localStorage.setItem('takenote-notes', JSON.stringify(notes));\n      console.log('Notes saved successfully');\n    } catch (error) {\n      console.error('Error saving notes to localStorage:', error);\n    }\n  }, [notes]);\n\n  const createNote = () => {\n    const newNote = {\n      id: Date.now(),\n      title: '',\n      content: '',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      isFavorite: false,\n      isDeleted: false\n    };\n    setNotes(prevNotes => [newNote, ...prevNotes]);\n    setSelectedNote(newNote);\n    return newNote;\n  };\n\n  const updateNote = (updatedNote) => {\n    setNotes(prevNotes =>\n      prevNotes.map(note =>\n        note.id === updatedNote.id ? updatedNote : note\n      )\n    );\n    setSelectedNote(updatedNote);\n  };\n\n  const deleteNote = (noteId) => {\n    setNotes(prevNotes =>\n      prevNotes.map(note =>\n        note.id === noteId\n          ? { ...note, isDeleted: true, updatedAt: new Date().toISOString() }\n          : note\n      )\n    );\n    if (selectedNote?.id === noteId) {\n      setSelectedNote(null);\n    }\n  };\n\n  const restoreNote = (noteId) => {\n    setNotes(prevNotes =>\n      prevNotes.map(note =>\n        note.id === noteId\n          ? { ...note, isDeleted: false, updatedAt: new Date().toISOString() }\n          : note\n      )\n    );\n  };\n\n  const permanentDeleteNote = (noteId) => {\n    setNotes(prevNotes => prevNotes.filter(note => note.id !== noteId));\n    if (selectedNote?.id === noteId) {\n      setSelectedNote(null);\n    }\n  };\n\n  const toggleFavorite = (noteId) => {\n    setNotes(prevNotes =>\n      prevNotes.map(note =>\n        note.id === noteId\n          ? { \n              ...note, \n              isFavorite: !note.isFavorite, \n              updatedAt: new Date().toISOString() \n            }\n          : note\n      )\n    );\n  };\n\n  const getFilteredNotes = (category) => {\n    switch (category) {\n      case 'favorites':\n        return notes.filter(note => note.isFavorite && !note.isDeleted);\n      case 'trash':\n        return notes.filter(note => note.isDeleted);\n      case 'all':\n      default:\n        return notes.filter(note => !note.isDeleted);\n    }\n  };\n\n  const getNoteCounts = () => {\n    return {\n      all: notes.filter(note => !note.isDeleted).length,\n      favorites: notes.filter(note => note.isFavorite && !note.isDeleted).length,\n      trash: notes.filter(note => note.isDeleted).length\n    };\n  };\n\n  return {\n    notes,\n    selectedNote,\n    setSelectedNote,\n    createNote,\n    updateNote,\n    deleteNote,\n    restoreNote,\n    permanentDeleteNote,\n    toggleFavorite,\n    getFilteredNotes,\n    getNoteCounts\n  };\n}\n\nexport default useNotes;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}