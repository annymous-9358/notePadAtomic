{"ast":null,"code":"var _jsxFileName = \"/Users/kunikjain/Desktop/AurigaIT_Intern/react/notepad/src/pages/NotesPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { AppLayout } from '../components/templates';\nimport { NoteList, NoteEditor, Settings } from '../components/organisms';\nimport useNotes from '../hooks/useNotes';\nimport { useTheme } from '../context/ThemeContext';\nimport { useSettings } from '../context/SettingsContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotesPage = () => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedNoteId, setSelectedNoteId] = useState(null);\n  const [isPreviewMode, setIsPreviewMode] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const {\n    notes,\n    createNote,\n    updateNote,\n    deleteNote,\n    toggleNoteStar\n  } = useNotes();\n  const {\n    isDarkTheme,\n    toggleTheme\n  } = useTheme();\n  const {\n    settings,\n    toggleSetting\n  } = useSettings();\n  React.useEffect(() => {\n    setIsPreviewMode(settings.markdownPreview);\n  }, [settings.markdownPreview]);\n  const selectedNote = notes.find(note => note.id === selectedNoteId);\n  const handleNoteCreate = () => {\n    const newNote = createNote();\n    setSelectedNoteId(newNote.id);\n  };\n  const handleNoteSelect = noteId => {\n    setSelectedNoteId(noteId);\n  };\n  const handleNoteUpdate = (noteId, updates) => {\n    updateNote(noteId, updates);\n  };\n  const handlePreviewToggle = () => {\n    const newPreviewMode = !isPreviewMode;\n    setIsPreviewMode(newPreviewMode);\n    toggleSetting('markdownPreview');\n  };\n  const handleDownloadAllNotes = () => {\n    const allNotesContent = notes.map(note => `# ${note.title || 'Untitled'}\\n\\n${note.content}\\n\\n---\\n\\n`).join('');\n    const element = document.createElement('a');\n    const file = new Blob([allNotesContent], {\n      type: 'text/markdown'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = 'all-notes.md';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  };\n  const handleNoteMenuClick = noteId => {\n    // Handle note menu actions (delete, duplicate, etc.)\n    console.log('Note menu clicked for:', noteId);\n  };\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    isDarkTheme: isDarkTheme,\n    sidebar: /*#__PURE__*/_jsxDEV(NoteList, {\n      notes: notes,\n      selectedNoteId: selectedNoteId,\n      searchTerm: searchTerm,\n      onSearchChange: setSearchTerm,\n      onNoteSelect: handleNoteSelect,\n      onNoteCreate: handleNoteCreate,\n      onNoteStarToggle: toggleNoteStar,\n      onNoteMenuClick: handleNoteMenuClick,\n      isDarkTheme: isDarkTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this),\n    main: /*#__PURE__*/_jsxDEV(NoteEditor, {\n      note: selectedNote,\n      onNoteUpdate: handleNoteUpdate,\n      isPreviewMode: isPreviewMode,\n      onPreviewToggle: handlePreviewToggle,\n      onSettingsClick: () => setIsSettingsOpen(true),\n      onThemeToggle: toggleTheme,\n      isDarkTheme: isDarkTheme,\n      displayLineNumbers: settings.displayLineNumbers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this),\n    modal: /*#__PURE__*/_jsxDEV(Settings, {\n      isOpen: isSettingsOpen,\n      onClose: () => setIsSettingsOpen(false),\n      settings: settings,\n      onSettingToggle: toggleSetting,\n      onDownloadNotes: handleDownloadAllNotes,\n      isDarkTheme: isDarkTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(NotesPage, \"HfdWlgRIy6Av1mTItnISjCLUDpk=\", false, function () {\n  return [useNotes, useTheme, useSettings];\n});\n_c = NotesPage;\nexport default NotesPage;\nvar _c;\n$RefreshReg$(_c, \"NotesPage\");","map":{"version":3,"names":["React","useState","AppLayout","NoteList","NoteEditor","Settings","useNotes","useTheme","useSettings","jsxDEV","_jsxDEV","NotesPage","_s","searchTerm","setSearchTerm","selectedNoteId","setSelectedNoteId","isPreviewMode","setIsPreviewMode","isSettingsOpen","setIsSettingsOpen","notes","createNote","updateNote","deleteNote","toggleNoteStar","isDarkTheme","toggleTheme","settings","toggleSetting","useEffect","markdownPreview","selectedNote","find","note","id","handleNoteCreate","newNote","handleNoteSelect","noteId","handleNoteUpdate","updates","handlePreviewToggle","newPreviewMode","handleDownloadAllNotes","allNotesContent","map","title","content","join","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","removeChild","handleNoteMenuClick","console","log","sidebar","onSearchChange","onNoteSelect","onNoteCreate","onNoteStarToggle","onNoteMenuClick","fileName","_jsxFileName","lineNumber","columnNumber","main","onNoteUpdate","onPreviewToggle","onSettingsClick","onThemeToggle","displayLineNumbers","modal","isOpen","onClose","onSettingToggle","onDownloadNotes","_c","$RefreshReg$"],"sources":["/Users/kunikjain/Desktop/AurigaIT_Intern/react/notepad/src/pages/NotesPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { AppLayout } from '../components/templates';\nimport { NoteList, NoteEditor, Settings } from '../components/organisms';\nimport useNotes from '../hooks/useNotes';\nimport { useTheme } from '../context/ThemeContext';\nimport { useSettings } from '../context/SettingsContext';\n\nconst NotesPage = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedNoteId, setSelectedNoteId] = useState(null);\n  const [isPreviewMode, setIsPreviewMode] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  \n  const { notes, createNote, updateNote, deleteNote, toggleNoteStar } = useNotes();\n  const { isDarkTheme, toggleTheme } = useTheme();\n  const { settings, toggleSetting } = useSettings();\n\n  React.useEffect(() => {\n    setIsPreviewMode(settings.markdownPreview);\n  }, [settings.markdownPreview]);\n\n  const selectedNote = notes.find(note => note.id === selectedNoteId);\n\n  const handleNoteCreate = () => {\n    const newNote = createNote();\n    setSelectedNoteId(newNote.id);\n  };\n\n  const handleNoteSelect = (noteId) => {\n    setSelectedNoteId(noteId);\n  };\n\n  const handleNoteUpdate = (noteId, updates) => {\n    updateNote(noteId, updates);\n  };\n\n  const handlePreviewToggle = () => {\n    const newPreviewMode = !isPreviewMode;\n    setIsPreviewMode(newPreviewMode);\n    toggleSetting('markdownPreview');\n  };\n\n  const handleDownloadAllNotes = () => {\n    const allNotesContent = notes.map(note => \n      `# ${note.title || 'Untitled'}\\n\\n${note.content}\\n\\n---\\n\\n`\n    ).join('');\n    \n    const element = document.createElement('a');\n    const file = new Blob([allNotesContent], { type: 'text/markdown' });\n    element.href = URL.createObjectURL(file);\n    element.download = 'all-notes.md';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  };\n\n  const handleNoteMenuClick = (noteId) => {\n    // Handle note menu actions (delete, duplicate, etc.)\n    console.log('Note menu clicked for:', noteId);\n  };\n\n  return (\n    <AppLayout\n      isDarkTheme={isDarkTheme}\n      sidebar={\n        <NoteList\n          notes={notes}\n          selectedNoteId={selectedNoteId}\n          searchTerm={searchTerm}\n          onSearchChange={setSearchTerm}\n          onNoteSelect={handleNoteSelect}\n          onNoteCreate={handleNoteCreate}\n          onNoteStarToggle={toggleNoteStar}\n          onNoteMenuClick={handleNoteMenuClick}\n          isDarkTheme={isDarkTheme}\n        />\n      }\n      main={\n        <NoteEditor\n          note={selectedNote}\n          onNoteUpdate={handleNoteUpdate}\n          isPreviewMode={isPreviewMode}\n          onPreviewToggle={handlePreviewToggle}\n          onSettingsClick={() => setIsSettingsOpen(true)}\n          onThemeToggle={toggleTheme}\n          isDarkTheme={isDarkTheme}\n          displayLineNumbers={settings.displayLineNumbers}\n        />\n      }\n      modal={\n        <Settings\n          isOpen={isSettingsOpen}\n          onClose={() => setIsSettingsOpen(false)}\n          settings={settings}\n          onSettingToggle={toggleSetting}\n          onDownloadNotes={handleDownloadAllNotes}\n          isDarkTheme={isDarkTheme}\n        />\n      }\n    />\n  );\n};\n\nexport default NotesPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}